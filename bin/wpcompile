#!/bin/bash

# PHP Coding Standard and compilation tests for WordPress plugins
#
# @author Michael Cannon <mc@aihr.us>

source ~/.skel/bin/wpinit ${@}
echo

function heading {
	echo >> ${FILE_CODE_QA}
	echo >> ${FILE_CODE_QA}
	echo ${1} >> ${FILE_CODE_QA}
	echo >> ${FILE_CODE_QA}
	echo >> ${FILE_CODE_QA}
}

for PLUGIN in ${PLUGINS}
do
	PWD=`pwd`
	BASENAME=`basename ${PWD}`
	if [[ ${BASENAME} != ${PLUGIN} ]]
	then
		DIR_PLUGIN="${SITE_WP_PLUGINS}/${PLUGIN}"
		if [[ ! -e ${DIR_PLUGIN} ]]
		then
			continue
		fi

		cd ${DIR_PLUGIN}
	else
		DIR_PLUGIN="${PWD}"
	fi

	FILE_CODE_QA="000-code-qa.txt"
	if [[ -e ${FILE_CODE_QA} ]]
	then
		rm ${FILE_CODE_QA}
	fi
	
	touch ${FILE_CODE_QA}

	heading PHPCS
	# code sniffer
	if [[ -e 'tests/phpcs.ruleset.xml' ]]
	then
		phpcs -s --standard=tests/phpcs.ruleset.xml ${DIR_PLUGIN} >> ${FILE_CODE_QA}
	else
		phpcs -s --standard=${DIR_RULESETS}/phpcs.ruleset.xml ${DIR_PLUGIN} >> ${FILE_CODE_QA}
	fi

	heading PHPMD
	# mess detect
	# @ref https://github.com/manuelpichler/phpmd
	PHPMD_EXCLUDE="jquery.cookie.js,jquery.bxslider.js,jquery.easing.*.js,jquery.fitvids.js,/libraries/"
	if [[ -e 'tests/phpmd.ruleset.xml' ]]
	then
		PHPMD_RULESET="tests/phpmd.ruleset.xml"
	else
		PHPMD_RULESET="${DIR_RULESETS}/phpmd.ruleset.xml"
	fi
	
	phpmd ${DIR_PLUGIN} --exclude ${PHPMD_EXCLUDE} text ${PHPMD_RULESET} >> ${FILE_CODE_QA}

	heading CSSLINT
	FILES=`find . -not -path '*/libraries/*' -type f \( -name "*.css" ! -name "jquery*" \)`
	for FILE in ${FILES}
	do
		# CSS Lint
		csslint --ignore=adjoining-classes,box-model,empty-rules --exclude-list=./css/redmond ${FILE} >> ${FILE_CODE_QA}
	done

	heading ERROR_LOG
	# any error_log code?
	grep -nrsI error_log ${DIR_PLUGIN} | grep -v '\bcommit:' >> ${FILE_CODE_QA}

	heading PHPCD
	# copy detector
	phpcpd ${DIR_PLUGIN} >> ${FILE_CODE_QA}

	heading CLAMAV
	# Anti-virus
	wpclamav ${DIR_PLUGIN} >> ${FILE_CODE_QA}

	heading PHP ERRORS
	FILES=`find . -not -path '*/libraries/*' -type f \( -name "*.php" -o -name "*.inc" \)`
	for FILE in ${FILES}
	do
		# PHP compile test
		php -lf ${FILE} >> ${FILE_CODE_QA}
	done

	# disabled as too many false positives reported
	# heading PHPDCD
	# # Dead Code Detector (DCD) for PHP code. It scans a PHP project for all declared functions and methods and reports those as being "dead code" that are not called at least once.
	# phpdcd --recursive --exclude="libraries" ${DIR_PLUGIN} >> ${FILE_CODE_QA}

	heading PHPLOC
	# # lines of type of code
	phploc ${DIR_PLUGIN} >> ${FILE_CODE_QA}

	# open file for review
	mvim ${FILE_CODE_QA}

	echo
done
